/*
 * WARNING: this is an autogenerated file and will be overwritten by
 * the extension interface script.
 */
/*
 * This file contains the automatically generated loader-side
 * functions that form part of the extension.
 *
 * This file is awlays compiled into all loaders but compiles
 * to nothing if this extension is not enabled in the loader
 * at build time.
 */
#include "IwDebug.h"
#include "s3ePlayhaven_autodefs.h"
#include "s3eEdk.h"
#include "s3ePlayhaven.h"
//Declarations of Init and Term functions
extern s3eResult s3ePlayhavenInit();
extern void s3ePlayhavenTerminate();


// On platforms that use a seperate UI/OS thread we can autowrap functions
// here.   Note that we can't use the S3E_USE_OS_THREAD define since this
// code is oftern build standalone, outside the main loader build.
#if defined I3D_OS_IPHONE || defined I3D_OS_OSX || defined I3D_OS_LINUX || defined I3D_OS_WINDOWS

static s3eResult s3ePlayhavenInitWithKeys_wrap(const char* token, const char* secret)
{
    IwTrace(PLAYHAVEN_VERBOSE, ("calling s3ePlayhaven func on main thread: s3ePlayhavenInitWithKeys"));
    return (s3eResult)(intptr_t)s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3ePlayhavenInitWithKeys, 2, token, secret);
}

static void s3ePHSendAppOpen_wrap(const char* customUDID)
{
    IwTrace(PLAYHAVEN_VERBOSE, ("calling s3ePlayhaven func on main thread: s3ePHSendAppOpen"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3ePHSendAppOpen, 1, customUDID);
}

static void s3ePHSendContentRequest_wrap(const char* placement, bool showOverlayImmediately)
{
    IwTrace(PLAYHAVEN_VERBOSE, ("calling s3ePlayhaven func on main thread: s3ePHSendContentRequest"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3ePHSendContentRequest, 2, placement, showOverlayImmediately);
}

static void s3ePHPreloadContentRequest_wrap(const char* placement)
{
    IwTrace(PLAYHAVEN_VERBOSE, ("calling s3ePlayhaven func on main thread: s3ePHPreloadContentRequest"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3ePHPreloadContentRequest, 1, placement);
}

static void s3ePHCancelAllContentRequests_wrap()
{
    IwTrace(PLAYHAVEN_VERBOSE, ("calling s3ePlayhaven func on main thread: s3ePHCancelAllContentRequests"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3ePHCancelAllContentRequests, 0);
}

static void s3ePHReportResolution_wrap(s3ePHPurchaseResolutionType resolution)
{
    IwTrace(PLAYHAVEN_VERBOSE, ("calling s3ePlayhaven func on main thread: s3ePHReportResolution"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3ePHReportResolution, 1, resolution);
}

static void s3ePHSendPublisherIAPTrackingRequest_wrap(const char* product, int quantity, s3ePHPurchaseResolutionType resolution)
{
    IwTrace(PLAYHAVEN_VERBOSE, ("calling s3ePlayhaven func on main thread: s3ePHSendPublisherIAPTrackingRequest"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3ePHSendPublisherIAPTrackingRequest, 3, product, quantity, resolution);
}

static s3eResult s3ePHShowNotificationView_wrap(int x, int y, bool useGLView, bool testing)
{
    IwTrace(PLAYHAVEN_VERBOSE, ("calling s3ePlayhaven func on main thread: s3ePHShowNotificationView"));
    return (s3eResult)(intptr_t)s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3ePHShowNotificationView, 4, x, y, useGLView, testing);
}

static void s3ePHClearNotificationView_wrap()
{
    IwTrace(PLAYHAVEN_VERBOSE, ("calling s3ePlayhaven func on main thread: s3ePHClearNotificationView"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3ePHClearNotificationView, 0);
}

static void s3ePHSetOptOutStatus_wrap(bool on)
{
    IwTrace(PLAYHAVEN_VERBOSE, ("calling s3ePlayhaven func on main thread: s3ePHSetOptOutStatus"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3ePHSetOptOutStatus, 1, on);
}

static void s3ePHSendPublisherIAPTrackingRequestWithReceipt_wrap(const char* product, int quantity, s3ePHPurchaseResolutionType resolution, const void* receiptData, size_t receiptSize)
{
    IwTrace(PLAYHAVEN_VERBOSE, ("calling s3ePlayhaven func on main thread: s3ePHSendPublisherIAPTrackingRequestWithReceipt"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3ePHSendPublisherIAPTrackingRequestWithReceipt, 5, product, quantity, resolution, receiptData, receiptSize);
}

#define s3ePlayhavenInitWithKeys s3ePlayhavenInitWithKeys_wrap
#define s3ePHSendAppOpen s3ePHSendAppOpen_wrap
#define s3ePHSendContentRequest s3ePHSendContentRequest_wrap
#define s3ePHPreloadContentRequest s3ePHPreloadContentRequest_wrap
#define s3ePHCancelAllContentRequests s3ePHCancelAllContentRequests_wrap
#define s3ePHReportResolution s3ePHReportResolution_wrap
#define s3ePHSendPublisherIAPTrackingRequest s3ePHSendPublisherIAPTrackingRequest_wrap
#define s3ePHShowNotificationView s3ePHShowNotificationView_wrap
#define s3ePHClearNotificationView s3ePHClearNotificationView_wrap
#define s3ePHSetOptOutStatus s3ePHSetOptOutStatus_wrap
#define s3ePHSendPublisherIAPTrackingRequestWithReceipt s3ePHSendPublisherIAPTrackingRequestWithReceipt_wrap

#endif

void s3ePlayhavenRegisterExt()
{
    /* fill in the function pointer struct for this extension */
    void* funcPtrs[13];
    funcPtrs[0] = (void*)s3ePlayhavenInitWithKeys;
    funcPtrs[1] = (void*)s3ePHRegisterCallback;
    funcPtrs[2] = (void*)s3ePHSendAppOpen;
    funcPtrs[3] = (void*)s3ePHSendContentRequest;
    funcPtrs[4] = (void*)s3ePHPreloadContentRequest;
    funcPtrs[5] = (void*)s3ePHCancelAllContentRequests;
    funcPtrs[6] = (void*)s3ePHReportResolution;
    funcPtrs[7] = (void*)s3ePHSendPublisherIAPTrackingRequest;
    funcPtrs[8] = (void*)s3ePHShowNotificationView;
    funcPtrs[9] = (void*)s3ePHClearNotificationView;
    funcPtrs[10] = (void*)s3ePHRefreshNotificationView;
    funcPtrs[11] = (void*)s3ePHSetOptOutStatus;
    funcPtrs[12] = (void*)s3ePHSendPublisherIAPTrackingRequestWithReceipt;

    /*
     * Flags that specify the extension's use of locking and stackswitching
     */
    int flags[13] = { 0 };

    /*
     * Register the extension
     */
    s3eEdkRegister("s3ePlayhaven", funcPtrs, sizeof(funcPtrs), flags, s3ePlayhavenInit, s3ePlayhavenTerminate, 0);
}

#if !defined S3E_BUILD_S3ELOADER

#if defined S3E_EDK_USE_STATIC_INIT_ARRAY
int s3ePlayhavenStaticInit()
{
    void** p = g_StaticInitArray;
    void* end = p + g_StaticArrayLen;
    while (*p) p++;
    if (p < end)
        *p = (void*)&s3ePlayhavenRegisterExt;
    return 0;
}

int g_s3ePlayhavenVal = s3ePlayhavenStaticInit();

#elif defined S3E_EDK_USE_DLLS
S3E_EXTERN_C S3E_DLL_EXPORT void RegisterExt()
{
    s3ePlayhavenRegisterExt();
}
#endif

#endif
